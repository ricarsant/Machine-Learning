# -*- coding: utf-8 -*-
"""Jaccard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XcIr2GRZoQVgDCbzICQabE8Vvt3mz9tg
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import pandas as  pd
import numpy as np
import pandas_profiling 
import matplotlib.pyplot as plt
import seaborn as sns
import math
#from surprise import Reader
#from surprise import Dataset
#from surprise.model_selection import train_test_split
#from surprise import KNNBasic
#from surprise import evaluate, print_perf
#from surprise import accuracy
import random
from sklearn.preprocessing import LabelEncoder
from collections import defaultdict
#from surprise import SVD
#from surprise import Dataset
#from surprise.model_selection import GridSearchCV
import numbers

"""## Cargar Datos"""

udata =pd.read_csv("/content/drive/My Drive/userid-timestamp-artid-artname-traid-traname.tsv", sep='\t' ,error_bad_lines=False,names=['userid','timestamp','artid','artname','traid','traname'])

dat =pd.read_csv("/content/drive/My Drive/userid-timestamp-artid-artname-traid-traname.tsv", sep='\t' ,error_bad_lines=False)

dat.head()

"""### Pre-Proceso datos"""

udata = udata.dropna(subset=['artid'])
udata =udata.drop_duplicates()
udata.shape

"""## Cargar datos de  ratings pre-calculados"""

def cargar_ratings():
  #ratingsbyuser1 =pd.read_csv("/content/drive/My Drive/ratingsbyuser2.csv" )
  ratingsbyuser1 =pd.read_csv("/content/drive/My Drive/ratingsbyuser1_v2.csv" )
  ratingsbyuser1 = ratingsbyuser1[['user_id','art_id','count','val_AP','val_AP1','val_RP','val_RP1','rating']]
  ratingsbyuser1 =ratingsbyuser1.dropna()
  return ratingsbyuser1
  #ratingsbyuser1.head()

ratingsbyuser1 =cargar_ratings()
ratingsbyuser1.head()

#cargar frecuencia usuario por artista - OK
ratingsby = udata.groupby(['userid','artid','artname'])['artid'].count().reset_index(name='count')

#Discretizar valores - OK
labelEncoder = LabelEncoder()
ratingsby['user_id'] = labelEncoder.fit_transform(ratingsby['userid'])
ratingsby['art_id'] = labelEncoder.fit_transform(ratingsby['artid'])
ratingsby.head()

"""Funcion para crear el conjunto de datos usuarios por item:  artista y usuarios que lo escuchan y <br>  items por usuario: usuario y artistas que consume"""

usersPerItem = defaultdict(set)
itemsPerUser =defaultdict(set)
itemNames={}

# dic itemsPerUser key user-id , values lista artitas que escucha
# dic usersPerItem key arti-id , values lista de usuarios que escuchan
def conjunto_jaccard():
  #usersPerItem = defaultdict(set)
  #itemsPerUser =defaultdict(set)
  #itemNames={}
  for i,d in ratingsby.iterrows():
    user,item = d['user_id'], d['art_id']
    usersPerItem[item].add(user)
    itemsPerUser[user].add(item)
    itemNames[item] = d['artname']

"""Funcion para el calculo del indixe de Jaccard"""

def Jaccard(s1,s2):
  number = len(s1.intersection(s2))
  denom =  len(s1.union(s2))
  return number/denom

"""## Funcion items similares"""

# retorna los 10 items mas similares al item i en funcion a la similitud jaccard de los usurios que  han escuchado el item i

def mostSimilar_item(i,n):
  similares=[]
  users =  usersPerItem[i]
  for i2 in  usersPerItem:
    if i2==i:continue
    sim = Jaccard(users,  usersPerItem[i2])
    similares.append((sim,i2))
  similares.sort(reverse=True)
  return similares[:n]

"""## Funcion usuarios similares"""

# dado un usuario retorna los 10 usuarios mas similares al usuario i en funcion a la similitud jaccard de los items que estos usuarios consumieron
def mostSimilar_usuario(i,n):
  similares=[]
  items =  itemsPerUser[i]
  for u2 in  itemsPerUser:
    if u2==i:continue
    sim = Jaccard(items,  itemsPerUser[u2])
    similares.append((sim,u2))

  similares.sort(key=lambda t: t[0],reverse= True)
  return similares[:n]

"""### Funcion items que no ha consumido el usuario"""

#retorna los Items que No ha consumido un usuario de una lista de items
def items_no_in_usuario(items,items_u):
  items_ok =[]
  for item in items:
    if item[1] not in items_u:
      items_ok.append(item)
  return items_ok

#retorna los Items que No ha consumido un usuario de una lista de items
def items_no_in_usuario_lista(items,items_u):
  items_ok =[]
  for item in items:
    if item not in items_u:
      items_ok.append(item)
  return items_ok

"""## Funcion de recomendacion con similitud jaccard basada en item"""

# dado un usuario recomenida items que no ha consumido en funcion de la similitud jaccard a items que han consumido otros usuarios
def rs_user_item_jaccard(userid,n):
  lista_items = itemsPerUser[userid]
  items_similares =[]
  for item in lista_items:
    items_similares = items_similares + (mostSimilar_item(item,n))
  
  items_similares = items_no_in_usuario(items_similares,lista_items)
  items_similares.sort(reverse=True)

  return items_similares[:n]

"""## Funcion de recomendacion con similitud jaccard basa en usuario"""

# dado un usuario recomenida items que no ha consumido en funcion de la similitud jaccard a usuarios que han consumido estos items
def rs_user_user_jaccard(userid,n):
    lista_items = itemsPerUser[userid]
    lista_usuarios = mostSimilar_usuario(userid,n)
    items_similares = set()
    items_similares_ =[]
    for user in lista_usuarios:
      for item in itemsPerUser[user[1]]:
        items_similares.add(item)
      items_similares_ = items_no_in_usuario_lista(items_similares,lista_items)
      if len(items_similares_) >= n:
        break

    return items_similares_[:n]

"""## Funcion que engloba las funciones de recomendacion con similitud Jaccard por item y por usuario"""

def items_most_similar(userid,metodo='item',n=10):
  if metodo=='item':
    #print(n)
    return [itemNames[i[1]] for i in rs_user_item_jaccard(userid,n)]
  else:
    #print('entra')
    return [itemNames[i] for i in rs_user_user_jaccard(userid,n)]

"""# Prueba - Se cargan los conjuntos de datos"""

conjunto_jaccard()

# Recomendacion de items por similitud Jaccard al usuario 678 basado en usuarios similares
#retorna 20 items
items_most_similar(678,'user',20)

# Recomendacion de items por similitud Jaccard al usuario 678 basa en items similares
# retorna 10 items
items_most_similar(678,'item',10)