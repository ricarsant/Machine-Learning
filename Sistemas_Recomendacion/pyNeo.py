# -*- coding: utf-8 -*-
"""Talle3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oGIjlxLu83IK_3T4MPdzTQVML9JTdRvq
"""

!pip install py2neo pandas

import pandas as pd
import requests
import numpy as np 
import matplotlib.pyplot as plt
from py2neo import Graph, Node,Relationship,NodeMatcher
import re
from IPython.display import clear_output, display
from datetime import datetime

#graph = Graph("bolt://34.224.17.173:33952", auth=("neo4j", "signal-market-gloves"))

#nuevas func
### FUNCIONES
def get_year(timestamp):
  dt_object = datetime.fromtimestamp(timestamp)
  return dt_object.year

def missing_values_table(df): 
        mis_val = df.isnull().sum()
        mis_val_percent = 100 * df.isnull().sum()/len(df)
        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)
        mis_val_table_ren_columns = mis_val_table.rename(
        columns = {0 : 'Missing Values', 1 : '% of Total Values'})
        return mis_val_table_ren_columns 
  
def _texto_(X):
    if type(X)==list:
        X = pd.Series(X)
    puntuacion = "''\!\"#$%&()*+-./:;<=>?@[\]^_`{|}~\n"
    X = X.apply(lambda x: [w for w in x if w not in  puntuacion])
    X = X.apply(lambda x: " ".join(x))
    return X.str.cat()

def existe_nodo(labels, propiedad, nombre):
    ac = graph.run("MATCH (n:" + labels + ") WHERE n." + propiedad + "= '" +nombre + "'  RETURN n").to_table()
    if len(ac) > 0:
        return True
    else:
        return False

def existe_relacion(pelicula, relacion,labels, propiedad,nombre):
    #graph.run("MATCH (Pelicula { titulo: 'Toy Story' })<-[:ACTUO_EN]-(Persona:Actor{nombre:'Tom Hanks'}) RETURN Persona.nombre").to_table()
    if("{" in relacion):
      posi  = relacion.find("{")
      relacion =  relacion[:posi]
    ac =graph.run("MATCH (Pelicula { titulo:'" + pelicula + "' })<-[:" + relacion +"]->(" + labels
                  + "{" + propiedad + ":'" + nombre + "' }) RETURN Pelicula.titulo").to_table()
    if len(ac) > 0:
        return True
    else:
        return False

def crear_relacion(pelicula,relacion,labels,nombre):
    if labels =="Genero":
        crear_rel = "MATCH (a:" + labels + "), (b:Pelicula) WHERE a.nombre ='" + nombre + "' AND b.titulo ='" + pelicula + "' CREATE (a) <-[:" + relacion + "]-(b) RETURN b.titulo"
    elif("{" in relacion):
        posi  = relacion.find("{")
        relacion = relacion[:posi] + " {rating:'" + relacion[posi+1:] +"'}"
        crear_rel = "MATCH (a:" + labels + "), (b:Pelicula) WHERE a.nombre ='" + nombre + "' AND b.titulo ='" + pelicula + "' CREATE (a) -[:" + relacion + "]->(b) RETURN b.titulo"
        
    else:
        crear_rel = "MATCH (a:" + labels + "), (b:Pelicula) WHERE a.nombre ='" + nombre + "' AND b.titulo ='" + pelicula + "' CREATE (a) -[:" + relacion + "]->(b) RETURN b.titulo"
   
    graph.run(crear_rel)
    #return crear_rel

def crear_nodos_(personas, labels, propiedad, relacion, titulo):
    for act in personas:
        act = act.strip()
        act = _texto_(list(act))
        #print(act)
        if not existe_nodo(labels,propiedad,act):
            labe = list(labels.split(":"))
            if len(labe) == 2:
                actor_nodo = Node("Persona",labe[1] , nombre = act)
            else:
                actor_nodo = Node(labe[0] , nombre = act)
            graph.create(actor_nodo)
        #existe_relacion("Toy Story","ES_GENERO", "Genero","nombre", "Animation")
        #if not existe_relacion(resp['Title'], relacion, labels, propiedad, act):
            #crear_relacion(resp['Title'],relacion,labels,act)
            
        if not existe_relacion(titulo, relacion, labels, propiedad, act):
            crear_relacion(titulo,relacion,labels,act)
            
def crear_nodo_pelicula(resp,titulo_peli):
                #print("SI")
            #Pelicula
            #titulo_peli = _texto_(list(resp['Title']))
            pelicula_nodo = Node("Pelicula", titulo = titulo_peli , lanzamiento=resp['Year'], rating = resp['imdbRating'], imdbId =resp['imdbID'] )
            graph.create(pelicula_nodo)

            #Actores
            personas = resp['Actors'].split(",")
            crear_nodos_(personas,"Persona:Actor","nombre", "ACTUO_EN",titulo_peli)

            #Directores
            personas = resp['Director'].split(",")
            #print("CREA DIRECTOREs ", personas)
            crear_nodos_(personas,"Persona:Director","nombre", "DIRIGIO",titulo_peli)

            #writers
            personas = re.sub(r'\((.*?)\)',"", resp['Writer'])
            personas = personas.split(",")
            crear_nodos_(personas,"Persona:Escritor","nombre", "ESCRIBIO", titulo_peli)

            #Genero
            personas = resp['Genre'].split(",")
            crear_nodos_(personas,"Genero","nombre", "ES_GENERO",titulo_peli)

def crear_nodo_user(userid,rating,resp, titulo_peli):
    if not existe_nodo("Pelicula", "titulo" , titulo_peli):
        crear_nodo_pelicula(resp,titulo_peli)
    userid =[str(userid)]
    #userid = list(userid)        
    relacion = "EVALUO{" + str(rating)
    crear_nodos_(userid, "Persona:Usuario","nombre",relacion,titulo_peli)
    
    #if not existe_nodo("Persona:Usuario", "nombre",userid):
        #userid = list(userid)
  
def crear_graph_movie(datos):
    global graph 
    i=1

    #graph = Graph("bolt://34.224.17.173:33952", auth=("neo4j", "signal-market-gloves")) 
    graph = Graph("bolt://100.26.153.60:33937", auth=("neo4j", "oxygen-symptoms-suppression")) 

    #graph = Graph("bolt://localhost:7687", auth=("neo4j", "uniandes"))
    not_links = []
    
    for index,item in datos.iterrows():
        userid = int(item['userId'])
        #movieid = int(item['movieId'])
        id_movie = str(item['imdbId'])
        rating = item['rating']
        
        url ="http://www.omdbapi.com/?i=tt" + id_movie +  "&apikey=cf95e754"
        resp = requests.get(url)  
        resp = resp.json()
        if 'Title' in resp.keys():
            mensaje = "Pelicula " + id_movie + ", Cuanto : " + str(i)
            clear_output(wait=False)
            print(mensaje)

            titulo_peli = _texto_(list(resp['Title']))
            if not existe_nodo("Pelicula", "titulo" , titulo_peli):
                crear_nodo_pelicula(resp,titulo_peli)
            
            crear_nodo_user(userid,rating,resp,titulo_peli)
        else:
            not_links.append(id_movie)
        i =i+1
            
    return not_links

def get_year(timestamp):
  dt_object = datetime.fromtimestamp(timestamp)
  return dt_object.year

def missing_values_table(df): 
        mis_val = df.isnull().sum()
        mis_val_percent = 100 * df.isnull().sum()/len(df)
        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)
        mis_val_table_ren_columns = mis_val_table.rename(
        columns = {0 : 'Missing Values', 1 : '% of Total Values'})
        return mis_val_table_ren_columns 
  
def _texto_(X):
    if type(X)==list:
        X = pd.Series(X)
    puntuacion = "''\!\"#$%&()*+-./:;<=>?@[\]^_`{|}~\n"
    X = X.apply(lambda x: [w for w in x if w not in  puntuacion])
    X = X.apply(lambda x: " ".join(x))
    return X.str.cat()

def existe_nodo(labels, propiedad, nombre):
    ac = graph.run("MATCH (n:" + labels + ") WHERE n." + propiedad + "= '" +nombre + "'  RETURN n").to_table()
    if len(ac) > 0:
        return True
    else:
        return False

def existe_relacion(pelicula, relacion,labels, propiedad,nombre):
    #graph.run("MATCH (Pelicula { titulo: 'Toy Story' })<-[:ACTUO_EN]-(Persona:Actor{nombre:'Tom Hanks'}) RETURN Persona.nombre").to_table()
    if("{" in relacion):
      posi  = relacion.find("{")
      relacion =  relacion[:posi]
    ac =graph.run("MATCH (Pelicula { titulo:'" + pelicula + "' })<-[:" + relacion +"]->(" + labels
                  + "{" + propiedad + ":'" + nombre + "' }) RETURN Pelicula.titulo").to_table()
    if len(ac) > 0:
        return True
    else:
        return False

def crear_relacion(pelicula,relacion,labels,nombre):
    if labels =="Genero":
        crear_rel = "MATCH (a:" + labels + "), (b:Pelicula) WHERE a.nombre ='" + nombre + "' AND b.titulo ='" + pelicula + "' CREATE (a) <-[:" + relacion + "]-(b) RETURN b.titulo"
    elif("{" in relacion):
        posi  = relacion.find("{")
        relacion = relacion[:posi] + " {rating:'" + relacion[posi+1:] +"'}"
        crear_rel = "MATCH (a:" + labels + "), (b:Pelicula) WHERE a.nombre ='" + nombre + "' AND b.titulo ='" + pelicula + "' CREATE (a) -[:" + relacion + "]->(b) RETURN b.titulo"
        
    else:
        crear_rel = "MATCH (a:" + labels + "), (b:Pelicula) WHERE a.nombre ='" + nombre + "' AND b.titulo ='" + pelicula + "' CREATE (a) -[:" + relacion + "]->(b) RETURN b.titulo"
   
    graph.run(crear_rel)
    #return crear_rel

def crear_nodos_(personas, labels, propiedad, relacion, titulo):
    for act in personas:
        act = act.strip()
        act = _texto_(list(act))
        #print(act)
        if not existe_nodo(labels,propiedad,act):
            labe = list(labels.split(":"))
            if len(labe) == 2:
                actor_nodo = Node("Persona",labe[1] , nombre = act)
            else:
                actor_nodo = Node(labe[0] , nombre = act)
            graph.create(actor_nodo)
        #existe_relacion("Toy Story","ES_GENERO", "Genero","nombre", "Animation")
        #if not existe_relacion(resp['Title'], relacion, labels, propiedad, act):
            #crear_relacion(resp['Title'],relacion,labels,act)
            
        if not existe_relacion(titulo, relacion, labels, propiedad, act):
            crear_relacion(titulo,relacion,labels,act)
            
def crear_nodo_pelicula(resp,titulo_peli):
                #print("SI")
            #Pelicula
            #titulo_peli = _texto_(list(resp['Title']))
            pelicula_nodo = Node("Pelicula", titulo = titulo_peli , lanzamiento=resp['Year'], rating = resp['imdbRating'], imdbId =resp['imdbID'] )
            graph.create(pelicula_nodo)

            #Actores
            personas = resp['Actors'].split(",")
            crear_nodos_(personas,"Persona:Actor","nombre", "ACTUO_EN",titulo_peli)

            #Directores
            personas = resp['Director'].split(",")
            #print("CREA DIRECTOREs ", personas)
            crear_nodos_(personas,"Persona:Director","nombre", "DIRIGIO",titulo_peli)

            #writers
            personas = re.sub(r'\((.*?)\)',"", resp['Writer'])
            personas = personas.split(",")
            crear_nodos_(personas,"Persona:Escritor","nombre", "ESCRIBIO", titulo_peli)

            #Genero
            personas = resp['Genre'].split(",")
            crear_nodos_(personas,"Genero","nombre", "ES_GENERO",titulo_peli)

def crear_nodo_user(userid,rating,resp, titulo_peli):
    if not existe_nodo("Pelicula", "titulo" , titulo_peli):
        crear_nodo_pelicula(resp,titulo_peli)
    userid =[str(userid)]
    #userid = list(userid)        
    relacion = "EVALUO{" + str(rating)
    crear_nodos_(userid, "Persona:Usuario","nombre",relacion,titulo_peli)
    
    if not existe_nodo("Persona:Usuario", "nombre",userid):
        userid = list(userid)
  
def crear_graph_movie(datos):
    global graph 
    global not_links
    i=1

    #bolt://100.26.153.60:33937

    graph = Graph("bolt://100.26.153.60:33937", auth=("neo4j", "oxygen-symptoms-suppression")) 

    #graph = Graph("bolt://localhost:7687", auth=("neo4j", "uniandes"))
    not_links = []
    
    for index,item in datos.iterrows():
        
        userid = int(item['userId'])
        
        id_movie = str(item['imdbId'])
        
        rating = item['rating']
        
        url ="http://www.omdbapi.com/?i=tt" + id_movie +  "&apikey=cf95e754"
        resp = requests.get(url)  
        resp = resp.json()
        if 'Title' in resp.keys():
            titulo_peli = _texto_(list(resp['Title']))
            if not existe_nodo("Pelicula", "titulo" , titulo_peli):
                crear_nodo_pelicula(resp,titulo_peli)
            
            crear_nodo_user(userid,rating,resp,titulo_peli)
        else:
            not_links.append(id_movie)
        
        mensaje = "Pelicula " + id_movie + ", Cuanto : " + str(i)
        clear_output(wait=False)
        print(mensaje)


        i =i+1
            
    return not_links

"""## Lectura de Archivos"""

links = pd.read_csv('/content/drive/My Drive/Colab Notebooks/links.csv', dtype ={'imdbId':str}) 
ratings =pd.read_csv("/content/drive/My Drive/Colab Notebooks/ratings.csv")

links.head()

ratings.head()

ratings["year"] = ratings.apply(lambda x: get_year(x['timestamp']),axis=1)

ratings.head()

ratings.describe()

ratings.year.value_counts(sort=False)

ratings_ = ratings[ratings.year >= 2015]
ratings_.shape

"""## Funciones

## Datos para Graph
"""

ratings_ =ratings_[['userId', 'movieId' ,'rating']].merge(links[['movieId','imdbId']], how ='left', on=['movieId','movieId'])
ratings_ = ratings_.sort_values(by ='userId')
print(ratings_.head())
print(ratings_.shape)

ratings_.to_pickle("/content/drive/My Drive/Colab Notebooks/ratings_ok.ft")



i = 3.5
relacion  = "EVALUO{" +str(i)
print(relacion)
if("{" in relacion):
  print("ok")
  posi  = relacion.find("{")
  relacion = relacion[:posi] + " { rating: '" + relacion[posi+1:] +"'}"
relacion

"""## Prueba creacion graph"""

rating_  = ratings[:20]
rating_.at[12,'imdbId'] ='999'
#0098627
rating_.at[8,'imdbId'] ='0098627'
rating_

from time import sleep
from IPython.display import clear_output, display
for f in range(10):
    clear_output(wait=True)
    print(f)  # use display(f) if you encounter performance issues
    sleep(2)

ratings_.head()

ratings_1 = ratings_[:21319]

ratings_.shape

not_links =[]
#clear_output(wait=True)
notlinks = crear_graph_movie(ratings_1)
print("Termina...", len(notlinks))

notlinks

ratings.head()

i = 0
datos_ = []
item_ =[]
df = pd.DataFrame()
for index,item in ratings.iterrows():
  if i > 4955:
     datos_.append(item)
  if i == 4961:
    item_.append(item)
  if i > 4970:
    #print("break")
    break
  i = i +1
df = df.append(datos_)
df

item_

links.head()

links.shape

links_ = links[:10]
links_.shape

not_links =[]
#clear_output(wait=True)
notlinks = crear_graph_movie(links)
print("Termina...", len(notlinks))

i = 0
datos_ = []
item_ =[]
df = pd.DataFrame()
for index,item in links.iterrows():
  if i > 6788:
     datos_.append(item)
  if i == 6794:
    item_.append(item)
  if i > 6805:
    #print("break")
    break
  i = i +1
df = df.append(datos_)
df

item_

not_links =[]
#clear_output(wait=True)
notlinks = crear_graph_movie(df)
print("Termina...", len(notlinks))